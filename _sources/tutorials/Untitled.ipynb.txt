{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AAA\n",
    "\n",
    "aaa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.animation as animation\n",
    "from matplotlib.widgets import Slider\n",
    "\n",
    "TWOPI = 2*np.pi\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "t = np.arange(0.0, TWOPI, 0.001)\n",
    "initial_amp = .5\n",
    "s = initial_amp*np.sin(t)\n",
    "l, = plt.plot(t, s, lw=2)\n",
    "\n",
    "ax = plt.axis([0,TWOPI,-1,1])\n",
    "\n",
    "axamp = plt.axes([0.25, .03, 0.50, 0.02])\n",
    "# Slider\n",
    "samp = Slider(axamp, 'Amp', 0, 1, valinit=initial_amp)\n",
    "\n",
    "# Animation controls\n",
    "is_manual = False # True if user has taken control of the animation\n",
    "interval = 100 # ms, time between animation frames\n",
    "loop_len = 5.0 # seconds per loop\n",
    "scale = interval / 1000 / loop_len\n",
    "\n",
    "def update_slider(val):\n",
    "    global is_manual\n",
    "    is_manual=True\n",
    "    update(val)\n",
    "\n",
    "def update(val):\n",
    "    # update curve\n",
    "    l.set_ydata(val*np.sin(t))\n",
    "    # redraw canvas while idle\n",
    "    fig.canvas.draw_idle()\n",
    "\n",
    "def update_plot(num):\n",
    "    global is_manual\n",
    "    if is_manual:\n",
    "        return l, # don't change\n",
    "\n",
    "    val = (samp.val + scale) % samp.valmax\n",
    "    samp.set_val(val)\n",
    "    is_manual = False # the above line called update_slider, so we need to reset this\n",
    "    return l,\n",
    "\n",
    "def on_click(event):\n",
    "    # Check where the click happened\n",
    "    (xm,ym),(xM,yM) = samp.label.clipbox.get_points()\n",
    "    if xm < event.x < xM and ym < event.y < yM:\n",
    "        # Event happened within the slider, ignore since it is handled in update_slider\n",
    "        return\n",
    "    else:\n",
    "        # user clicked somewhere else on canvas = unpause\n",
    "        global is_manual\n",
    "        is_manual=False\n",
    "\n",
    "# call update function on slider value change\n",
    "samp.on_changed(update_slider)\n",
    "\n",
    "fig.canvas.mpl_connect('button_press_event', on_click)\n",
    "\n",
    "ani = animation.FuncAnimation(fig, update_plot, interval=interval)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "delta",
   "language": "python",
   "name": "delta"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
